nnutil.jl:
ARGS[1]: idx
         number of nn hidden layers 3(idx=0), 4(idx=1), 5(idx=2)


1.  run GenerateData.sh with force_scale = 1.0


2.  For point-to-point learning
    run NNLearn.sh  
    it has "julia NNLearn.jl 1",  The source file is in NNLearn.jl, and the number 1 (idx) determines nn layer number in nnutil

3.  For indirect data learning
    a) run NNPrefit.sh
    it has "julia NNPreLSfit.jl 1", The source file is in NNPreLSfit.jl
    b) run NNTrain.sh
    it has "julia Train_NNPlatePull.jl 1", The source file is Train_NNPlatePull.jl, you can choose the restart output (restart_id=3) 
    from the PreLSfit results

4. For postprocess
   julia NN_Test_All_Save_Data.jl 1
   Postprocess all paper results with idx=1



The present setup is nntype=stiffmat in all files. 


prop = Dict("name"=> testtype, "rho"=> 0.800, "C1"=>0.1863e6, "C2"=>0.00979e6)
The true parameters 
rho = 800kg/m^3 = 0.8kg/m^2      C1=0.1863e6MPa   C2=0.00979e6MPa     Lx=0.1m   Ly=0.05m   th=0.001m   T=0.2s   
Force load on the edge:
P1 = 44800 N/m    P2 =  4480 N/m   P3 = 16800 N/m 


we use unit kg, m, ms, Pa=kg/m s^2,   N =kg m/s^2
rho = 0.8      C1=0.1863e6   C2=0.00979e6     Lx=0.1   Ly=0.05   T=0.2  
P1 = 44800     P2 =  4480    P3 = 16800


Scaling about NN
strain_scale = 1  stress_scale = 1e5   (stress_scale/strain_scale ~ C1,C2)


